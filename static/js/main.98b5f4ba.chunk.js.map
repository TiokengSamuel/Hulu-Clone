{"version":3,"sources":["Header.js","requests.js","Nav.js","VideoCard.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMysteryMovies","fetchSciFiMovies","fetchWersternMovies","fetchAnimationMovies","fetchTV","Nav","setSelectedOption","onClick","requests","VideoCard","forwardRef","ref","movie","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","media_type","release_date","first_air_date","vote_count","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98b5f4ba.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\nimport HomeIcon from '@material-ui/icons/Home'\nimport FlashOnIcon from '@material-ui/icons/FlashOn'\nimport LiveTvIcon from '@material-ui/icons/LiveTv'\nimport SearchIcon from '@material-ui/icons/Search'\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary'\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline'\n\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <div className=\"header__icons\">\n                <div className=\"header__icon header__icon--active\">\n                    <HomeIcon/>\n                    <p>Home</p>\n                </div>\n                <div className=\"header__icon\">\n                    <FlashOnIcon/>\n                    <p>Trending</p>\n                </div>\n                <div className=\"header__icon\">\n                    <LiveTvIcon/>\n                    <p>Live Tv</p>\n                </div>\n                <div className=\"header__icon\">\n                    <VideoLibraryIcon/>\n                    <p>Collections</p>\n                </div>\n                <div className=\"header__icon\">\n                    <SearchIcon/>\n                    <p>Search</p>\n                </div>\n                <div className=\"header__icon\">\n                    <PersonOutlineIcon/>\n                    <p>Account</p>\n                </div>\n                \n                \n                \n\n            </div>\n            <img src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\" alt=\"logo\"/>\n        </div>\n    )\n}\n\nexport default Header\n","const API_KEY = '010cf02106be78cd97145ccefed2ec7d';\n\nexport default {\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchMysteryMovies:`/discover/movie?api_key=${API_KEY}&with_genres=9648`,\n    fetchSciFiMovies:`/discover/movie?api_key=${API_KEY}&with_genres=878`,\n    fetchWersternMovies:`/discover/movie?api_key=${API_KEY}&with_genres=37`,\n    fetchAnimationMovies:`/discover/movie?api_key=${API_KEY}&with_genres=16`,\n    fetchTV:`/discover/movie?api_key=${API_KEY}&with_genres=10770`,\n\n};","import React from 'react'\nimport './Nav.css'\nimport requests from \"./requests\";\n\nfunction Nav({setSelectedOption}) {\n    return (\n        <div className=\"nav\">\n            <h2 onClick={() => setSelectedOption(requests.fetchTrending)}>Trending</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchTopRated)}>Top Rated</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchActionMovies)}>Action</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchHorrorMovies)}>Horror</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchRomanceMovies)}>Romance</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchMysteryMovies)}>Mystery</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchSciFiMovies)}>Sci-fi</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchWersternMovies)}>Werstern</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchAnimationMovies)}>Animation</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchTV)}>Movie</h2>\n        </div>\n    )\n}\n\nexport default Nav\n","import React, { forwardRef } from 'react'\nimport './VideoCard.css'\nimport TextTruncate from \"react-text-truncate\"\nimport ThumbUpSharp from '@material-ui/icons/ThumbUpSharp'\n\nconst base_url = \"http://image.tmdb.org/t/p/original\";\n\nconst VideoCard = forwardRef(({ movie }, ref) =>{\n    return (\n        <div ref={ref} className=\"videoCard\">\n            <img src={`${base_url}${movie.backdrop_path || movie.poster_path}`} alt=\"\"/>\n            <TextTruncate\n              line={1}\n              element=\"p\"\n              truncateText=\"...\"\n              text={movie.overview}\n            />\n            <h2>{movie.title || movie.original_name}</h2>\n\n            <p className=\"videoCard__stats\">\n                {movie.media_type && `${movie.media_type}   `}\n                {movie.release_date || movie.first_air_date} â€¢ {\" \"}\n                <ThumbUpSharp/> {\" \"}\n                {movie.vote_count}\n            </p>\n        </div>\n    )\n})\n\nexport default VideoCard\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n})\n\nexport default instance;","import React, { useEffect, useState } from 'react'\nimport './Results.css'\nimport VideoCard from './VideoCard'\nimport axios from  './axios'\nimport FlipMove from \"react-flip-move\"\n\nfunction Results( {selectedOption}) {\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(selectedOption)\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    }, [selectedOption]);\n    \n\n    return (\n        <div className=\"results\">\n            <FlipMove>\n            {movies.map((movie) => (\n                <VideoCard key={movie.id} movie= {movie}/>\n            ))}\n            </FlipMove>\n        </div>\n    )\n}\n\nexport default Results\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Results from './Results'\nimport requests from \"./requests\"\n\nfunction App() {\n  const [selectedOption, setSelectedOption]= useState(requests.fetchTrending);\n\n  return (\n    <div className=\"app\">\n      \n      <Header/>\n      <Nav setSelectedOption={setSelectedOption}/>\n      <Results selectedOption={selectedOption}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}